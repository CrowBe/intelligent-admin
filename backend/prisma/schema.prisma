// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  passwordHash      String    @map("password_hash")
  firstName         String    @map("first_name")
  lastName          String    @map("last_name")
  businessName      String?   @map("business_name")
  businessType      String?   @map("business_type")
  phone             String?
  timezone          String    @default("Australia/Sydney")
  preferences       String    @default("{}")
  emailVerified     Boolean   @default(false) @map("email_verified")
  emailVerifiedAt   DateTime? @map("email_verified_at")
  lastLoginAt       DateTime? @map("last_login_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  deletedAt         DateTime? @map("deleted_at")

  // Relations
  chatSessions      ChatSession[]
  integrations      Integration[]
  documents         Document[]
  tasks             Task[]
  userPreferences   UserPreference[]
  emailAnalyses     EmailAnalysis[]
  notifications     Notification[]
  workflowPatterns  WorkflowPattern[]

  @@map("users")
}

model ChatSession {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  title           String?
  contextData     String    @default("{}") @map("context_data")
  status          String    @default("active") // active, archived, deleted
  messageCount    Int       @default(0) @map("message_count")
  lastActivityAt  DateTime  @default(now()) @map("last_activity_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  deletedAt       DateTime? @map("deleted_at")

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]
  tasks    Task[]

  @@index([userId])
  @@index([lastActivityAt])
  @@index([status])
  @@map("chat_sessions")
}

model Message {
  id               String    @id @default(cuid())
  sessionId        String    @map("session_id")
  role             String    // user, assistant, system
  content          String
  metadata         String    @default("{}")
  tokenCount       Int?      @map("token_count")
  processingTimeMs Int?      @map("processing_time_ms")
  timestamp        DateTime  @default(now())
  editedAt         DateTime? @map("edited_at")
  deletedAt        DateTime? @map("deleted_at")

  // Relations
  session ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([timestamp])
  @@index([role])
  @@map("messages")
}

model Integration {
  id                     String    @id @default(cuid())
  userId                 String    @map("user_id")
  provider               String    // gmail, google_calendar, hubspot, etc.
  providerUserId         String?   @map("provider_user_id")
  encryptedTokens        String    @map("encrypted_tokens")
  refreshTokenEncrypted  String?   @map("refresh_token_encrypted")
  tokenExpiresAt         DateTime? @map("token_expires_at")
  scopes                 String    // JSON array as string
  capabilities           String    // JSON array as string
  status                 String    @default("connected") // connected, expired, error, disconnected
  metadata               String    @default("{}")
  lastSyncAt             DateTime? @map("last_sync_at")
  connectedAt            DateTime  @default(now()) @map("connected_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")
  deletedAt              DateTime? @map("deleted_at")

  // Relations
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks Task[]

  @@unique([userId, provider])
  @@index([userId])
  @@index([provider])
  @@index([status])
  @@map("integrations")
}

model Document {
  id               String    @id @default(cuid())
  userId           String    @map("user_id")
  filename         String
  originalFilename String    @map("original_filename")
  title            String?
  category         String?
  tags             String    @default("[]") // JSON array as string
  mimeType         String    @map("mime_type")
  fileSize         Int       @map("file_size")
  filePath         String    @map("file_path")
  contentText      String?   @map("content_text")
  extractedData    String    @default("{}") @map("extracted_data")
  processingStatus String    @default("pending") @map("processing_status") // pending, processing, completed, failed
  processingError  String?   @map("processing_error")
  uploadedAt       DateTime  @default(now()) @map("uploaded_at")
  processedAt      DateTime? @map("processed_at")
  deletedAt        DateTime? @map("deleted_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([category])
  @@index([processingStatus])
  @@index([uploadedAt])
  @@map("documents")
}

model MCPAgent {
  id               String    @id @default(cuid())
  name             String    @unique
  description      String?
  endpoint         String
  capabilities     String    @default("[]")
  configuration    String    @default("{}")
  status           String    @default("active") // active, inactive, error
  version          String?
  healthCheckUrl   String?   @map("health_check_url")
  lastHealthCheck  DateTime? @map("last_health_check")
  healthStatus     String    @default("unknown") @map("health_status") // healthy, unhealthy, unknown
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  deletedAt        DateTime? @map("deleted_at")

  // Relations
  tasks Task[]

  @@index([name])
  @@index([status])
  @@map("mcp_agents")
}

model Task {
  id                String       @id @default(cuid())
  userId            String       @map("user_id")
  sessionId         String?      @map("session_id")
  agentId           String       @map("agent_id")
  integrationId     String?      @map("integration_id")
  taskType          String       @map("task_type")
  inputPayload      String       @map("input_payload")
  outputPayload     String?      @map("output_payload")
  status            String       @default("pending") // pending, running, completed, failed, cancelled
  errorMessage      String?      @map("error_message")
  startedAt         DateTime     @default(now()) @map("started_at")
  completedAt       DateTime?    @map("completed_at")
  processingTimeMs  Int?         @map("processing_time_ms")
  retryCount        Int          @default(0) @map("retry_count")
  metadata          String       @default("{}")

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  session     ChatSession? @relation(fields: [sessionId], references: [id], onDelete: SetNull)
  agent       MCPAgent     @relation(fields: [agentId], references: [id], onDelete: Cascade)
  integration Integration? @relation(fields: [integrationId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([sessionId])
  @@index([agentId])
  @@index([status])
  @@index([startedAt])
  @@map("tasks")
}

// Enhanced Phase 1 Tables

model UserPreference {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  preferenceType  String    @map("preference_type") // follow_up_timing, communication_tone, task_batching, etc.
  preferenceData  String    @map("preference_data") // JSON data
  confidence      Float     @default(0.5) // How confident we are in this preference (0-1)
  learnedAt       DateTime  @default(now()) @map("learned_at")
  lastAppliedAt   DateTime? @map("last_applied_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, preferenceType])
  @@index([userId])
  @@index([preferenceType])
  @@map("user_preferences")
}

model EmailAnalysis {
  id                String    @id @default(cuid())
  userId            String    @map("user_id")
  emailMessageId    String    @map("email_message_id") // Gmail message ID
  senderEmail       String    @map("sender_email")
  subject           String
  urgencyScore      Float     @map("urgency_score") // 0-1 scale
  category          String    // urgent, standard, follow_up, admin
  keywords          String    @default("[]") // JSON array of detected keywords
  businessImpact    String?   @map("business_impact") // high, medium, low
  suggestedActions  String    @default("[]") @map("suggested_actions") // JSON array
  customerType      String?   @map("customer_type") // business, residential
  jobValue          Float?    @map("job_value") // Estimated job value if detected
  responseGenerated Boolean   @default(false) @map("response_generated")
  userFeedback      String?   @map("user_feedback") // JSON feedback on accuracy
  analyzedAt        DateTime  @default(now()) @map("analyzed_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, emailMessageId])
  @@index([userId])
  @@index([category])
  @@index([urgencyScore])
  @@index([analyzedAt])
  @@map("email_analyses")
}

model IndustryKnowledge {
  id              String    @id @default(cuid())
  source          String    // australian_standards, esv, mea, electrical_connection, etc.
  sourceUrl       String?   @map("source_url")
  contentType     String    @map("content_type") // regulation, pricing, standard, best_practice
  category        String    // electrical, plumbing, carpentry, etc.
  title           String
  content         String    // Full text content
  extractedData   String    @default("{}") @map("extracted_data") // Structured JSON data
  relevanceScore  Float     @default(0.5) @map("relevance_score") // How relevant to users
  lastUpdated     DateTime  @map("last_updated")
  nextUpdateDue   DateTime? @map("next_update_due")
  isActive        Boolean   @default(true) @map("is_active")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@index([source])
  @@index([contentType])
  @@index([category])
  @@index([relevanceScore])
  @@index([lastUpdated])
  @@map("industry_knowledge")
}

model Notification {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  type            String    // morning_brief, urgent_email, task_reminder, etc.
  title           String
  content         String
  data            String    @default("{}") // JSON data for the notification
  scheduled       Boolean   @default(false) // Is this a scheduled notification?
  scheduledFor    DateTime? @map("scheduled_for")
  sentAt          DateTime? @map("sent_at")
  openedAt        DateTime? @map("opened_at")
  clickedAt       DateTime? @map("clicked_at")
  status          String    @default("pending") // pending, sent, opened, clicked, failed
  deviceToken     String?   @map("device_token") // Firebase device token
  createdAt       DateTime  @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([status])
  @@index([scheduledFor])
  @@index([sentAt])
  @@map("notifications")
}

model WorkflowPattern {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  patternType     String    @map("pattern_type") // email_batch_timing, follow_up_preference, etc.
  patternData     String    @map("pattern_data") // JSON data describing the pattern
  confidence      Float     @default(0.1) // How confident we are (0-1)
  occurrences     Int       @default(1) // How many times we've seen this pattern
  lastSeen        DateTime  @default(now()) @map("last_seen")
  isActive        Boolean   @default(true) @map("is_active")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, patternType])
  @@index([userId])
  @@index([patternType])
  @@index([confidence])
  @@index([lastSeen])
  @@map("workflow_patterns")
}