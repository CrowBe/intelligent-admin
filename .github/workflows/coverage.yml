name: Coverage Report

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20'

jobs:
  coverage:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: postgres
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Setup test database
      env:
        DATABASE_URL: postgresql://postgres:test@localhost:5432/test
      run: |
        cd backend
        npx prisma generate
        npx prisma migrate deploy
    
    - name: Run backend tests with coverage
      run: npm run test:backend -- --coverage
      env:
        DATABASE_URL: postgresql://postgres:test@localhost:5432/test
        NODE_ENV: test
        JWT_SECRET: test-secret-key-for-ci-testing-minimum-32-characters
        OPENAI_API_KEY: sk-test-key-for-ci-testing-purposes-only
    
    - name: Run frontend tests with coverage  
      run: npm run test:frontend -- --coverage
      env:
        VITE_API_BASE_URL: http://localhost:3001/api/v1
    
    - name: Run shared tests with coverage
      run: npm run test:shared -- --coverage
    
    - name: Generate aggregated coverage report
      run: npm run test:coverage
      env:
        DATABASE_URL: postgresql://postgres:test@localhost:5432/test
        NODE_ENV: test
        JWT_SECRET: test-secret-key-for-ci-testing-minimum-32-characters
        OPENAI_API_KEY: sk-test-key-for-ci-testing-purposes-only
        VITE_API_BASE_URL: http://localhost:3001/api/v1
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info
        flags: unittests
        name: intelligent-admin-coverage
        verbose: true
        fail_ci_if_error: false  # Don't fail on upload issues
      if: always()
    
    - name: Upload coverage to Coveralls
      uses: coverallsapp/github-action@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: ./coverage/lcov.info
        flag-name: unit-tests
      if: always()
      continue-on-error: true
    
    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: romeovs/lcov-reporter-action@v0.3.1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        lcov-file: ./coverage/lcov.info
        delete-old-comments: true
      continue-on-error: true
      
    - name: Generate coverage badges
      uses: gaelgirodon/ci-badges-action@v1
      with:
        gist-id: ${{ secrets.GIST_ID }}
        token: ${{ secrets.GIST_TOKEN }}
        coverage: ./coverage/coverage-summary.json
      if: github.ref == 'refs/heads/main'
      continue-on-error: true