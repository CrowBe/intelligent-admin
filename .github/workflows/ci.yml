name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20'
  DATABASE_URL: postgresql://postgres:test@localhost:5432/test

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: postgres
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run type checking
      run: npm run type-check
    
    - name: Setup database
      env:
        DATABASE_URL: postgresql://postgres:test@localhost:5432/test
      run: |
        cd backend
        npx prisma generate
        npx prisma migrate deploy
    
    - name: Run tests with coverage
      run: npm run test:coverage
      env:
        NODE_ENV: test
        JWT_SECRET: test-secret-key-for-ci-testing-minimum-32-characters
        OPENAI_API_KEY: sk-test-key-for-ci-testing-purposes-only
        TEST_DATABASE_URL: postgresql://postgres:test@localhost:5432/test
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info
        flags: unittests
        name: intelligent-admin-coverage
        fail_ci_if_error: true
      if: success()
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: Build backend
      run: |
        cd backend
        npm run build

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better secret scanning
    
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Security audit (High severity vulnerabilities)
      run: npm audit --audit-level=high --omit=dev
    
    - name: Security audit (All dependencies including dev)
      run: npm audit --audit-level=moderate
      continue-on-error: true  # Report dev dependency issues but don't fail
    
    - name: Check for secrets with TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified
    
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript,typescript
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Check code formatting with Prettier
      run: |
        npx prettier --check "**/*.{js,jsx,ts,tsx,json,md,yml,yaml}" --ignore-path .gitignore
    
    - name: Check for unused dependencies
      run: npx depcheck --ignores="@types/*,vitest,@vitest/*,typescript"
      continue-on-error: true  # Report but don't fail on unused deps
    
    - name: Analyze bundle size (Frontend)
      run: |
        cd frontend
        npm run build
        echo "Frontend bundle analysis:"
        ls -lah dist/assets/*.js 2>/dev/null | head -10 || echo "No JS bundles found"
        
    - name: Analyze bundle size (Backend)
      run: |
        cd backend
        npm run build
        echo "Backend build analysis:"
        ls -lah dist/ 2>/dev/null || echo "No backend dist found"
        
    - name: Check package vulnerabilities with yarn audit
      run: |
        if command -v yarn &> /dev/null; then
          yarn audit --level moderate || echo "Yarn audit completed with warnings"
        else
          echo "Yarn not available, skipping yarn audit"
        fi
      continue-on-error: true
